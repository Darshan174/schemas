// Package academy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package academy

import (
	"time"

	"github.com/gofrs/uuid"
	"github.com/meshery/schemas/models/core"
)

// Defines values for AcademyRegistrationStatus.
const (
	Completed  AcademyRegistrationStatus = "completed"
	Failed     AcademyRegistrationStatus = "failed"
	InProgress AcademyRegistrationStatus = "in_progress"
	Registered AcademyRegistrationStatus = "registered"
	Withdrawn  AcademyRegistrationStatus = "withdrawn"
)

// Defines values for ContentType.
const (
	ContentTypeChallenge    ContentType = "challenge"
	ContentTypeExam         ContentType = "exam"
	ContentTypeLearningPath ContentType = "learning-path"
)

// Defines values for Level.
const (
	Advanced     Level = "advanced"
	Beginner     Level = "beginner"
	Intermediate Level = "intermediate"
)

// Defines values for RegisterToAcademyContentRequestContentType.
const (
	RegisterToAcademyContentRequestContentTypeChallenge    RegisterToAcademyContentRequestContentType = "challenge"
	RegisterToAcademyContentRequestContentTypeExam         RegisterToAcademyContentRequestContentType = "exam"
	RegisterToAcademyContentRequestContentTypeLearningPath RegisterToAcademyContentRequestContentType = "learning-path"
)

// Defines values for Status.
const (
	Archived Status = "archived"
	NotReady Status = "not_ready"
	Ready    Status = "ready"
)

// Defines values for Visibility.
const (
	Private Visibility = "private"
	Public  Visibility = "public"
)

// AcademyCirricula defines model for AcademyCirricula.
type AcademyCirricula struct {
	// CreatedAt When the cirricula item was created
	CreatedAt time.Time `db:"created_at" json:"created_at" yaml:"created_at"`

	// DeletedAt Timestamp when the resource was deleted.
	DeletedAt core.NullTime `db:"deleted_at" json:"deleted_at" yaml:"deleted_at"`

	// ID Id of the cirricula
	ID string `db:"id" json:"id" yaml:"id"`

	// Level Level of the cirricula
	Level Level `db:"level" json:"level" yaml:"level"`

	// Metadata Additional metadata about the cirricula
	Metadata core.Map `db:"metadata" json:"metadata" yaml:"metadata"`

	// OrgId Organization ID that owns this learning path
	OrgId string `db:"org_id" json:"org_id" yaml:"org_id"`

	// Slug slug of the cirricula
	Slug string `json:"slug" yaml:"slug"`

	// Status Status of the cirricula
	Status Status      `db:"status" json:"status" yaml:"status"`
	Type   ContentType `db:"type" json:"type" yaml:"type"`

	// UpdatedAt When the cirricula was last updated
	UpdatedAt core.Time `db:"updated_at" json:"updated_at" yaml:"updated_at"`

	// Visibility Visibility of the cirricula
	Visibility Visibility `db:"visibility" json:"visibility" yaml:"visibility"`
}

// AcademyCirriculaListResponse defines model for AcademyCirriculaListResponse.
type AcademyCirriculaListResponse struct {
	Data []AcademyCirricula `json:"data" yaml:"data"`

	// Total Total number of cirricula
	Total int `json:"total" yaml:"total"`
}

// AcademyRegistration defines model for AcademyRegistration.
type AcademyRegistration struct {
	// ContentId ID of the course content
	ContentId string `db:"content_id" json:"content_id" yaml:"content_id"`

	// CreatedAt When the registration was created
	CreatedAt time.Time `db:"created_at" json:"created_at" yaml:"created_at"`

	// DeletedAt Timestamp when the resource was deleted.
	DeletedAt core.NullTime `db:"deleted_at" json:"deleted_at,omitempty" yaml:"deleted_at,omitempty"`

	// ID A Universally Unique Identifier used to uniquely identify entities in Meshery. The UUID core definition is used across different schemas.
	ID uuid.UUID `db:"id" json:"id" yaml:"id"`

	// Metadata Additional metadata about the registration
	Metadata core.Map `db:"metadata" json:"metadata" yaml:"metadata"`

	// OrgId ID of the organization
	OrgId uuid.UUID `db:"org_id" json:"org_id" yaml:"org_id"`

	// Status Status of the user's course registration
	Status AcademyRegistrationStatus `db:"status" json:"status" yaml:"status"`

	// UpdatedAt When the registration was updated
	UpdatedAt time.Time `db:"updated_at" json:"updated_at" yaml:"updated_at"`

	// UserId ID of the user (foreign key to User)
	UserId uuid.UUID `db:"user_id" json:"user_id" yaml:"user_id"`
}

// AcademyRegistrationStatus Status of the user's course registration
type AcademyRegistrationStatus string

// AcademyRegistrationsListResponse defines model for AcademyRegistrationsListResponse.
type AcademyRegistrationsListResponse struct {
	Data []AcademyRegistration `json:"data" yaml:"data"`

	// Total Total number of learning paths
	Total int `json:"total" yaml:"total"`
}

// ChallengeMetadata defines model for ChallengeMetadata.
type ChallengeMetadata struct {
	// Banner Optional banner image
	Banner *string `json:"banner" yaml:"banner"`

	// Courses List of courses in this learning path
	Courses *[]Course `json:"courses,omitempty" yaml:"courses,omitempty"`

	// Description Description of the learning path
	Description string `json:"description" yaml:"description"`

	// Permalink Canonical URL for the learning path
	Permalink string `json:"permalink" yaml:"permalink"`

	// Title Title of the learning path
	Title string `json:"title" yaml:"title"`
}

// CirriculaCurrentItemData defines model for CirriculaCurrentItemData.
type CirriculaCurrentItemData struct {
	ContentType ContentType `json:"content_type" yaml:"content_type"`
	Id          string      `json:"id" yaml:"id"`
	LastOpened  time.Time   `json:"last_opened" yaml:"last_opened"`
}

// CirriculaGrade defines model for CirriculaGrade.
type CirriculaGrade struct {
	Attempts int    `json:"attempts" yaml:"attempts"`
	Grade    string `json:"grade" yaml:"grade"`
	ModuleId string `json:"module_id" yaml:"module_id"`
	Passed   bool   `json:"passed" yaml:"passed"`
}

// CirriculaProgressTracker defines model for CirriculaProgressTracker.
type CirriculaProgressTracker struct {
	Completed   core.NullTime                       `json:"completed" yaml:"completed"`
	CurrentItem map[string]CirriculaCurrentItemData `json:"current_item" yaml:"current_item"`
	Grades      map[string]interface{}              `json:"grades" yaml:"grades"`

	// TimeSpent Total time spent in seconds
	TimeSpent int `json:"time_spent" yaml:"time_spent"`
}

// ContentType defines model for ContentType.
type ContentType string

// Course defines model for Course.
type Course struct {
	// Banner Optional banner image
	Banner *string `json:"banner" yaml:"banner"`

	// Description Course description
	Description string `json:"description" yaml:"description"`

	// ID Unique identifier for the course
	ID string `db:"id" json:"id" yaml:"id"`

	// Permalink URL to the course content
	Permalink string `json:"permalink" yaml:"permalink"`

	// Title Title of the course
	Title string `json:"title" yaml:"title"`

	// Weight Order of the course in the list
	Weight *float32 `json:"weight,omitempty" yaml:"weight,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *string `json:"details,omitempty" yaml:"details,omitempty"`
	Error   *string `json:"error,omitempty" yaml:"error,omitempty"`
}

// LearningPathMetadata defines model for LearningPathMetadata.
type LearningPathMetadata struct {
	// Banner Optional banner image
	Banner *string `json:"banner" yaml:"banner"`

	// Courses List of courses in this learning path
	Courses *[]Course `json:"courses,omitempty" yaml:"courses,omitempty"`

	// Description Description of the learning path
	Description string `json:"description" yaml:"description"`

	// Permalink Canonical URL for the learning path
	Permalink string `json:"permalink" yaml:"permalink"`

	// Title Title of the learning path
	Title string `json:"title" yaml:"title"`
}

// Level defines model for Level.
type Level string

// RegisterToAcademyContentRequest defines model for RegisterToAcademyContentRequest.
type RegisterToAcademyContentRequest struct {
	// ContentId ID of the academy content to register for
	ContentId   string                                      `json:"content_id" yaml:"content_id"`
	ContentType *RegisterToAcademyContentRequestContentType `json:"content_type,omitempty" yaml:"content_type,omitempty"`
}

// RegisterToAcademyContentRequestContentType defines model for RegisterToAcademyContentRequest.ContentType.
type RegisterToAcademyContentRequestContentType string

// Status defines model for Status.
type Status string

// UpdateCurrentItemRequest defines model for UpdateCurrentItemRequest.
type UpdateCurrentItemRequest struct {
	ContentType ContentType              `json:"content_type" yaml:"content_type"`
	ItemData    CirriculaCurrentItemData `json:"item_data" yaml:"item_data"`
}

// Visibility defines model for Visibility.
type Visibility string
