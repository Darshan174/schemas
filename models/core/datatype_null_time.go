// This is not autogenerated.
package core

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

// NullTime replaces sql.NullTime with an implementation
// that supports proper JSON encoding/decoding.
type NullTime struct {
	Time  time.Time
	Valid bool // Valid is true if NullTime is not NULL
}

// NewTime returns a new, properly instantiated
// NullTime object.
func NewTime(t time.Time) NullTime {
	return NullTime{Time: t, Valid: true}
}

// Scan implements the Scanner interface.
func (nt *NullTime) Scan(value interface{}) error {
	if value == nil {
		nt.Time, nt.Valid = time.Time{}, false
		return nil
	}
	t, ok := value.(time.Time)
	nt.Time = t
	nt.Valid = ok
	return nil
}

// Value implements the driver Valuer interface.
func (nt NullTime) Value() (driver.Value, error) {
	if !nt.Valid {
		return nil, nil
	}
	return nt.Time, nil
}

// MarshalJSON marshals the underlying value to a
// proper JSON representation.
func (nt NullTime) MarshalJSON() ([]byte, error) {
	if nt.Valid {
		return json.Marshal(nt.Time)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON will unmarshal a JSON value into
// the propert representation of that value.
// --
// This NullTime implementation supports unmarshaling from both:
// - A JSON time string (e.g., "2023-07-05T15:04:05Z")
// - A JSON object (e.g., {"Time":"0001-01-01T00:00:00Z","Valid":false})
// - A JSON null value
//
// we need support for JSON object as provider is using sql.NullTime now for DeletedAt field
// which is marshaled to json as such object
// and is returned from api
func (nt *NullTime) UnmarshalJSON(text []byte) error {
	nt.Valid = false

	if string(text) == "null" || len(text) == 0 {
		return nil
	}

	// we need this type to avoid stack overflow
	type TmpNullTime NullTime
	var obj TmpNullTime
	errObj := json.Unmarshal(text, &obj)
	if errObj == nil {
		nt.Time = obj.Time
		nt.Valid = obj.Valid
		return nil
	}

	var t time.Time
	errTime := t.UnmarshalJSON(text)
	if errTime == nil {
		nt.Time = t
		nt.Valid = true
		return nil
	}

	// Both attempts failed â€” combine errors
	return fmt.Errorf("failed to unmarshal NullTime: as object error: %v; as time string error: %v", errObj, errTime)
}
