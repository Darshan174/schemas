// This is not autogenerated.
package core

import (
	"database/sql/driver"
	"encoding/json"
	"time"
)

// NullTime replaces sql.NullTime with an implementation
// that supports proper JSON encoding/decoding.
type NullTime struct {
	Time  time.Time
	Valid bool // Valid is true if NullTime is not NULL
}

// NewTime returns a new, properly instantiated
// NullTime object.
func NewTime(t time.Time) NullTime {
	return NullTime{Time: t, Valid: true}
}

// Scan implements the Scanner interface.
func (nt *NullTime) Scan(value interface{}) error {
	nt.Time, nt.Valid = value.(time.Time)
	return nil
}

// Value implements the driver Valuer interface.
func (nt NullTime) Value() (driver.Value, error) {
	if !nt.Valid {
		return nil, nil
	}
	return nt.Time, nil
}

// MarshalJSON marshals the underlying value to a
// proper JSON representation.
func (nt NullTime) MarshalJSON() ([]byte, error) {
	if nt.Valid {
		return json.Marshal(nt.Time)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON will unmarshal a JSON value into
// the propert representation of that value.
func (nt *NullTime) UnmarshalJSON(text []byte) error {
	nt.Valid = false
	txt := string(text)
	if txt == "null" || txt == "" {
		return nil
	}

	t := time.Time{}
	err := t.UnmarshalJSON(text)
	if err == nil {
		nt.Time = t
		nt.Valid = true
	}

	return err
}
