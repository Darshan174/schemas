openapi: 3.1.0
info:
  title: Meshery Playground
  description: Documentation for Meshery Cloud REST APIs
  contact:
    email: support@meshery.io
  version: v0.8.219
servers:
  - url: https://cloud.meshery.io
    description: Meshery Cloud production server URL
  - url: https://staging-playground.meshery.io
    description: Meshery Cloud staging server URL
  - url: http://localhost:9876
    description: Meshery Cloud development server URL (controlled via PORT environment variable)
tags:
  - name: users
    description: User Management
  - name: roles
    description: Roles, assignments to users and assignments of keychains
  - name: service mesh interface
    description: APIs for conformance tests
  - name: scheduler
    description: APIs for scheduler
  - name: tokens
    description: APIs for User tokens
  - name: credentials
    description: APIs for Credentials
  - name: events
    description: Event logs and audit trail
  - name: capabilities
    description: APIs for remote provider capablities
  - name: system
    description: APIs for Meshery system management
  - name: content
    description: APIs for content (designs, patterns, filters)
  - name: catalog
    description: Catalog contains published designs, filters and other artifacts
  - name: collaboration
    description: APIs for collaboration
  - name: integrations
    description: APIs for integrations
  - name: user onboarding
    description: APIs for user onboarding (signup requests)
  - name: organization
    description: Organization Management
  - name: subscription
    description: Active and inactive subscriptions
  - name: plans
    description: User plans
  - name: teams
    description: User Team Management
  - name: keys
    description: Keys represent individual permissions
  - name: keychains
    description: Keychains are collections of keys
  - name: environments
    description: Environments are a collection of connections
  - name: workspaces
    description: Workspaces bring teams, environments, and designs together
security:
  - jwt: []
components:
  schemas:
    user:
      type: object
      $ref: ./definitions.yml#/components/schemas/user
    usersPageForAdmin:
      type: object
      $ref: ./definitions.yml#/components/schemas/usersPageForAdmin
    usersForNonAdmin:
      type: object
      $ref: ./definitions.yml#/components/schemas/usersForNonAdmin
    teamMembersPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/teamMembersPage
    usersPageForNonAdmin:
      type: object
      $ref: ./definitions.yml#/components/schemas/usersPageForNonAdmin
    usersWithRolesForAdmin:
      type: object
      $ref: ./definitions.yml#/components/schemas/usersWithRoles
    role:
      type: object
      $ref: ./definitions.yml#/components/schemas/role
    performanceProfile:
      type: object
      $ref: ./definitions.yml#/components/schemas/performanceProfile
    performanceProfilePage:
      type: object
      $ref: ./definitions.yml#/components/schemas/performanceProfilePage
    performanceResult:
      type: object
      $ref: ./definitions.yml#/components/schemas/performanceResult
    mesheryResultPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryResultPage
    schedule:
      type: object
      $ref: ./definitions.yml#/components/schemas/schedule
    schedulePage:
      type: object
      $ref: ./definitions.yml#/components/schemas/schedulePage
    k8sContext:
      type: object
      $ref: ./definitions.yml#/components/schemas/k8sContext
    k8sContextPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/k8sContextPage
    k8sContextPersistResponse:
      type: object
      $ref: ./definitions.yml#/components/schemas/k8sContextPersistResponse
    userToken:
      type: object
      $ref: ./definitions.yml#/components/schemas/userToken
    tokenPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/tokenPage
    credential:
      type: object
      $ref: ./definitions.yml#/components/schemas/credential
    credentialsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/credentialsPage
    smiResult:
      type: object
      $ref: ./definitions.yml#/components/schemas/smiResult
    smiResultPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/smiResultPage
    eventTrackerGroupedArray:
      type: object
      $ref: ./definitions.yml#/components/schemas/eventTrackerGroupedArray
    eventsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/eventsPage
    event:
      type: object
      $ref: ./definitions.yml#/components/schemas/event
    eventSummaryPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/eventSummaryPage
    recentActivityPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/recentActivityPage
    accountOverview:
      type: object
      $ref: ./definitions.yml#/components/schemas/accountOverview
    recentUsers:
      type: object
      $ref: ./definitions.yml#/components/schemas/recentUsers
    recentUsersPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/recentUsersPage
    capability:
      type: object
      $ref: ./definitions.yml#/components/schemas/capability
    mesheryPatternResource:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryPatternResource
    mesheryPatternResourcePage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryPatternResourcePage
    mesheryPattern:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryPattern
    mesheryPatternPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryPatternPage
    githubMetadataPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/githubMetadataPage
    repositoryScanResultsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/repositoryScanResultsPage
    mesheryDesignPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryDesignPage
    catalogRequest:
      type: object
      $ref: ./definitions.yml#/components/schemas/catalogRequest
    catalogRequestsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/catalogRequestsPage
    mesheryFilter:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryFilter
    mesheryFilterPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryFilterPage
    mesheryApplication:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryApplication
    mesheryApplicationPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryApplicationPage
    signupRequestsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/signupRequestsPage
    mesheryInstance:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryInstance
    organization:
      type: object
      $ref: ./definitions.yml#/components/schemas/organization
    organizationsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/organizationsPage
    teamsOrganizationsMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/teamsOrganizationsMappingPage
    organizationPreferences:
      type: object
      $ref: ./definitions.yml#/components/schemas/organizationPreferences
    subscription:
      type: object
      $ref: ./definitions.yml#/components/schemas/subscription
    subscriptionsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/subscriptionsPage
    subscriptionPlan:
      type: object
      $ref: ./definitions.yml#/components/schemas/plan
    plan:
      type: object
      $ref: ./definitions.yml#/components/schemas/plan
    planPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/planPage
    team:
      type: object
      $ref: ./definitions.yml#/components/schemas/team
    availableTeam:
      type: object
      $ref: ./definitions.yml#/components/schemas/availableTeam
    teams:
      $ref: ./definitions.yml#/components/schemas/teams
    teamsPage:
      $ref: ./definitions.yml#/components/schemas/teamPage
    users:
      $ref: ./definitions.yml#/components/schemas/users
    roles:
      $ref: ./definitions.yml#/components/schemas/roles
    rolesPage:
      $ref: ./definitions.yml#/components/schemas/rolesPage
    roleNames:
      $ref: ./definitions.yml#/components/schemas/roleNames
    usersTeamsMappingPage:
      $ref: ./definitions.yml#/components/schemas/usersTeamsMappingPage
    usersTeamsMapping:
      $ref: ./definitions.yml#/components/schemas/usersTeamsMapping
    teamsOrganizationsMapping:
      $ref: ./definitions.yml#/components/schemas/teamsOrganizationsMapping
    usersOrganizationsMapping:
      $ref: ./definitions.yml#/components/schemas/usersOrganizationsMapping
    rolesKeychainsMapping:
      $ref: ./definitions.yml#/components/schemas/rolesKeychainsMapping
    key:
      $ref: ./definitions.yml#/components/schemas/key
    keysPage:
      $ref: ./definitions.yml#/components/schemas/keysPage
    keychain:
      $ref: ./definitions.yml#/components/schemas/keychain
    keychainFilter:
      $ref: ./definitions.yml#/components/schemas/keychainFilter
    keychainsPage:
      $ref: ./definitions.yml#/components/schemas/keychainsPage
    connection:
      type: object
      $ref: ./definitions.yml#/components/schemas/connection
    environment:
      type: object
      $ref: ./definitions.yml#/components/schemas/environment
    environmentPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/environmentPage
    workspacesEnvironmentsMapping:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesEnvironmentsMapping
    workspacesEnvironmentsMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesEnvironmentsMappingPage
    workspacesTeamsMapping:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesTeamsMapping
    workspacesTeamsMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesTeamsMappingPage
    workspacesDesignsMapping:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesDesignsMapping
    workspacesDesignsMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesDesignsMappingPage
    workspacesViewsMapping:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesViewsMapping
    workspacesViewsMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacesViewsMappingPage
    workspace:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspace
    environmentConnectionMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/environmentConnectionMappingPage
    mesheryView:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryView
    resourceAccessMapping:
      type: object
      $ref: ./definitions.yml#/components/schemas/resourceAccessMapping
    mesheryViewPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/mesheryViewPage
    workspacePage:
      type: object
      $ref: ./definitions.yml#/components/schemas/workspacePage
    connectionPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/connectionPage
    connectionsStatusPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/connectionsStatusPage
    badgeRequest:
      type: object
      $ref: ./definitions.yml#/components/schemas/badgeRequest
    userKeys:
      type: object
      $ref: ./definitions.yml#/components/schemas/userKeys
    badges:
      type: object
      $ref: ./definitions.yml#/components/schemas/badges
    meshmodelCategoriesPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/meshmodelCategoriesPage
    meshmodelModelsPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/meshmodelModelsPage
    userSummaryPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/userSummaryPage
    resourceAccessMappingPage:
      type: object
      $ref: ./definitions.yml#/components/schemas/resourceAccessMappingPage
    eventsAggregate:
      type: object
      $ref: ./definitions.yml#/components/schemas/eventsAggregate
    availableNotificationPreferences:
      type: object
      $ref: ./definitions.yml#/components/schemas/availableNotificationPreferences
    schema:
      type: object
      $ref: ./definitions.yml#/components/schemas/schema
  parameters:
    id:
      name: id
      in: path
      description: Unique identifier
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    resultId:
      name: result_id
      in: path
      description: Result id
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    serverId:
      name: mesheryServerID
      in: path
      description: Meshery server ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    connectionId:
      name: connectionId
      in: path
      description: Connection ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    webhookType:
      name: webhookType
      in: path
      description: Webhook type support from server like (support, kanvasEntitlement)
      schema:
        type: string
      required: true
    environmentId:
      name: environmentId
      in: path
      description: Environment ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    workspaceId:
      name: workspaceId
      in: path
      description: Workspace ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    viewId:
      name: viewId
      in: path
      description: View ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    designId:
      name: designId
      in: path
      description: Design ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    instanceId:
      name: mesheryInstanceID
      in: path
      description: Meshery instance ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    instanceIdQuery:
      name: mesheryInstanceID
      in: query
      description: Meshery instance ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
    contextId:
      name: contextID
      in: path
      description: Meshery context ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    userId:
      name: userId
      in: path
      description: User's user_id
      schema:
        type: string
      required: true
    shared:
      name: shared
      in: query
      description: Get shared resources
      schema:
        type: boolean
    orgID:
      name: orgID
      in: path
      description: User's organization ID
      schema:
        type: string
      required: true
    orgIDQuery:
      name: orgID
      in: query
      description: User's organization ID
      schema:
        type: string
      required: true
    subscriptionId:
      name: subscriptionId
      in: path
      description: Subscription Id
      schema:
        type: string
      required: true
    organizationId:
      name: organizationId
      in: path
      description: Organization Id
      schema:
        type: string
      required: true
    planId:
      name: planId
      in: path
      description: Plan Id
      schema:
        type: string
      required: true
    keychainId:
      name: keychainID
      in: path
      description: Keychain Id
      schema:
        type: string
      required: true
    credentialId:
      name: credential_id
      in: query
      description: credential Id
      schema:
        type: string
      required: true
    resourceName:
      name: resourceName
      in: path
      description: schema Resource Name
      schema:
        type: string
      required: true
    all:
      name: all
      in: query
      description: Get all possible entries
      schema:
        type: boolean
    page:
      name: page
      in: query
      description: Get responses by page
      schema:
        type: string
    userid:
      name: userid
      in: query
      description: Filter catalog items by user ID. Pass multiple user IDs to fetch content for several users simultaneously.
      schema:
        type: string
    metrics:
      name: metrics
      in: query
      description: Include metrics associated with the designs.
      schema:
        type: string
    class:
      name: class
      in: query
      description: 'Filter catalog items based on their support class. Specify one or more classes per request as needed. Example: ''official'' and ''verified'''
      schema:
        type: string
    pagesize:
      name: pagesize
      in: query
      description: Get responses by pagesize
      schema:
        type: string
    pagesizeWithAll:
      name: pagesize
      in: query
      description: Get responses by pagesize (pass all to get all responses)
      schema:
        type: string
    order:
      name: order
      in: query
      description: Get ordered responses
      schema:
        type: string
    visibility:
      name: visibility
      in: query
      description: Get responses based on visibility - private, public or published
      schema:
        type: string
    populate:
      name: populate
      in: query
      description: Populate the response with additional data like pattern_file
      schema:
        type: string
    search:
      name: search
      in: query
      description: Get responses that match search param value
      schema:
        type: string
    filter:
      name: filter
      in: query
      description: Get filtered reponses
      schema:
        type: string
    eventsFilter:
      name: filter
      in: query
      description: Filter for retrieving events
      schema:
        $ref: ./definitions.yml#/components/schemas/events_filter
    environmentsFilter:
      name: filter
      in: query
      description: Filter for retrieving Environments
      schema:
        properties:
          assigned:
            type: boolean
            description: Pass true to get assigned environments, false to get unassigned environments
          deleted_at:
            type: boolean
            description: pass true to get deleted environments, false to get undeleted environments
    workspaceFilter:
      name: filter
      in: query
      description: Filter for retrieving Workspaces
      schema:
        properties:
          assigned:
            type: boolean
            description: Pass true to get assigned workspaces, false to get unassigned workspaces
          deleted_at:
            type: boolean
            description: pass true to get deleted workspaces, false to get undeleted workspaces
    requestFilter:
      name: filter
      in: query
      description: Filter for catalog requests
      schema:
        properties:
          id:
            $ref: ./definitions.yml#/components/schemas/id
          status:
            type: array
            items:
              type: string
          workspace_id:
            $ref: ./definitions.yml#/components/schemas/id
    isOAuth:
      name: isOAuth
      in: query
      description: To get OAuth tokens as well
      schema:
        type: string
    name:
      name: name
      in: query
      description: Name of the resource
      schema:
        type: string
    purpose:
      name: purpose
      in: query
      description: Purpose for which token is generated
      schema:
        type: string
    cumulative:
      name: cumulative
      in: query
      description: Cumulative events
      schema:
        type: string
    mesheryVersion:
      name: meshery-version
      in: path
      description: meshery version
      schema:
        type: string
      required: true
    os:
      name: os
      in: query
      description: user's os
      schema:
        type: string
    playground:
      name: playground
      in: query
      description: Is playground mode
      schema:
        type: string
    namespace:
      name: namespace
      in: query
      description: Namespace
      schema:
        type: string
    type:
      name: type
      in: query
      description: Type
      schema:
        type: string
    oamType:
      name: oamType
      in: query
      description: OAM type
      schema:
        type: string
    connectionKind:
      name: connectionKind
      in: path
      description: 'Connection kind (eg: Meshery)'
      required: true
      schema:
        type: string
    teamId:
      name: teamId
      in: path
      description: Team's teamId
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    teamID:
      name: teamID
      in: query
      description: Team's teamId
      schema:
        $ref: ./definitions.yml#/components/schemas/id
    resourceId:
      name: resourceId
      in: path
      description: Id of resource
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    actorType:
      name: actorType
      in: path
      description: Type of actor e.g user, team, system, registrant
      schema:
        type: string
      required: true
    resourceType:
      name: resourceType
      in: path
      description: Type of resource e.g design, filter, view, environment, workspace
      schema:
        type: string
      required: true
    roleId:
      name: roleId
      in: path
      description: Role's role_id
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    selector:
      name: selector
      in: query
      description: Selector
      schema:
        type: string
    catalogContentType:
      in: path
      required: true
      name: type
      description: Catalog content type
      schema:
        $ref: ./definitions.yml#/components/schemas/catalogContentType
    contentType:
      in: query
      required: false
      name: type
      description: Filter catalog data based on type of content e.g (deployment, workloads, scaling...) multiple params can be passed
      schema:
        type: string
    contentTechnology:
      in: query
      required: false
      name: technology
      description: Filter catalog data based on technology(compatibility) of content e.g (kubernetes, istio...) multiple params can be passed
      schema:
        type: string
    deleteOn:
      in: path
      required: true
      name: delete_on
      description: Defines on whom the delete operation is to be performed
      schema:
        $ref: ./definitions.yml#/components/schemas/deleteOn
    tokenName:
      in: query
      required: true
      name: token_name
      description: Name of the token
      schema:
        $ref: ./definitions.yml#/components/schemas/userToken/properties/name
    tokenId:
      in: query
      required: true
      name: token_id
      description: ID of the token
      schema:
        $ref: ./definitions.yml#/components/schemas/userToken/properties/id
    keyId:
      in: path
      required: true
      name: keyId
      description: key ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
    connectionsByMultipleKinds:
      name: kind
      in: query
      description: Get responses based on connection kind - eg (meshery, kubernetes), kind param can be passed multiple times
      schema:
        type: array
      example:
        - meshery
        - kubernetes
    connectionsByMultipleStatus:
      name: status
      in: query
      description: Get responses based on connection status - eg (connected, discovered), status param can be passed multiple times
      schema:
        type: array
        items:
          type: string
      example:
        - connected
        - discovered
    workspaceID:
      name: workspaceid
      in: query
      description: Workspace ID
      schema:
        $ref: ./definitions.yml#/components/schemas/id
      required: true
    repoName:
      name: name
      in: query
      description: Repository to scan
      schema:
        type: string
      example:
        - meshery/meshery
        - dapr/helm-charts
    installationId:
      name: id
      in: query
      description: Github installtion id
      schema:
        type: string
    ref:
      name: ref
      in: query
      description: Branch/SHA/tag name to scan.
      schema:
        type: string
      example:
        - master
        - <shaid>
  requestBodies:
    mapObject:
      description: Body of type map
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/map_object
    user:
      description: Body for upserting user
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/user
    mentionRequestBody:
      description: Body for sending email notifications about comments
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mentionRequestBody
    userFeedbackRequestBody:
      description: Body for sending feedback email notifications
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/userFeedbackRequestBody
    userInvite:
      description: Body for user invite request
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/userInvite
    userPrefs:
      description: Body for upserting user preferences
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/map_object
    designShare:
      description: Body for sharing design
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/designShare
    resourceShare:
      description: Body for sharing resource
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/resourceAccessMappingPayload
    githubMetadataRequest:
      description: Body for sharing resource
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/githubRequestBody
    githubImportRequest:
      description: Body for importing designs from github
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/githubImportRequest
    repositoryScanPayload:
      description: Body for the repository to scan.
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/repositoryScanPayload
    viewShare:
      description: Body for sharing view
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/viewShare
    deleteUsers:
      description: Body for delete of user accounts
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: ./definitions.yml#/components/schemas/bulkDelete
              - $ref: ./definitions.yml#/components/schemas/empty
    roleHolderRequest:
      description: Body for assigning role to the user
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/roleHolderRequest
    role:
      description: Body for editing role of the user
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/usersWithRoles
    bulkRoles:
      description: Body for editing role of the users in bulk
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./definitions.yml#/components/schemas/usersWithRoles
    performanceProfile:
      description: Body for upserting performance profile
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/performanceProfile
    performanceResult:
      description: Body for upserting performance result
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/performanceResult
    smiResult:
      description: Body for upserting SMI result
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/smiResult
    schedule:
      description: Body for upserting scheduling
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/schedule
    k8sContext:
      description: Body for upserting k8s context
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/k8sContext
    credential:
      description: Body for user credential
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/credential
    userToken:
      description: Body for user token
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/userToken
    mesheryPatternResource:
      description: Body for upserting meshery pattern resource
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryPatternResource
    mesheryPatternRequestBody:
      description: Body for upserting meshery pattern
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryPatternRequestBody
    mesheryCatalogRequestBody:
      description: Body for publishing catalog
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryCatalogRequestBody
    mesheryCloneRequestBody:
      description: Body for cloning design
      required: true
      content:
        application/json:
          schema:
            properties:
              name:
                type: string
            required:
              - name
    mesheryPatternDeleteRequestBody:
      description: Body for pattern delete request
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryPatternDeleteRequestBody
    mesheryFilterRequestBody:
      description: Body for upserting meshery filter
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryFilterRequestBody
    mesheryApplicationRequestBody:
      description: Body for upserting meshery application
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryApplicationRequestBody
    mesheryApplicationSourceContent:
      description: Body for upserting meshery application source content
      required: true
      content:
        text/plain:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryApplication/properties/source_content
    mesheryPatternSourceContent:
      description: Body for upserting meshery pattern source content
      required: true
      content:
        text/plain:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryPattern/properties/source_content
    signupData:
      description: Body for updating user signup request
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/signupData
    connectionPayload:
      description: Body for registering with Meshery Cloud
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/connectionPayload
    mesheryInstance:
      description: Body for updating connection of kind Meshery with Meshery Cloud
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryInstance
    plan:
      description: Body for upserting plan of kind Meshery with Meshery Cloud
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/planRequestBody
    team:
      description: Body for adding a new team
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/team
    organizationPayload:
      description: Body for upserting organization
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/organizationPayload
    teamPayload:
      description: Body for upserting teams
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/teamPayload
    rolePayload:
      description: Body for upserting roles
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/rolePayload
    keyPayload:
      description: Body for creating key
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/key
    keychainPayload:
      description: Body for creating keychain
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/keychain
    badgeRequestPayload:
      description: Body for un/assigning badges
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/badgeRequest
    environmentPayload:
      description: Body for creating environment
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/environmentPayload
    workspacePayload:
      description: Body for creating workspace
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/workspacePayload
    mesheryViewPayload:
      description: Body for creating view
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/mesheryViewPayload
    workspaceUpdatePayload:
      description: Body for updating workspace
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/workspaceUpdatePayload
    viewUpdatePayload:
      description: Body for updating view
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/viewUpdatePayload
    notificationPreferenceRequest:
      description: Body for updating notification preferences
      required: true
      content:
        application/json:
          schema:
            $ref: ./definitions.yml#/components/schemas/notificationPreferenceRequest
  responses:
    '200':
      description: ok
      content:
        text/plain:
          schema:
            type: string
    '201':
      description: ''
      content:
        text/plain:
          schema:
            type: string
    '400':
      description: Invalid request body or request param
      content:
        text/plain:
          schema:
            type: string
    '401':
      description: Expired JWT token used or insufficient privilege
      content:
        text/plain:
          schema:
            type: string
    '404':
      description: Result not found
      content:
        text/plain:
          schema:
            type: string
    '409':
      description: Publish request already exists
      content:
        text/plain:
          schema:
            type: string
    '500':
      description: Internal server error
      content:
        text/plain:
          schema:
            type: string
  securitySchemes:
    jwt:
      type: http
      scheme: Bearer
      bearerFormat: JWT
paths:
  /api/identity/orgs/{orgID}/users/invite:
    post:
      tags:
        - users
      operationId: HandleUserInvite
      summary: User Invite
      description: Send invitation request to users
      parameters:
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/userInvite'
      responses:
        '200':
          description: Invitation sent
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/preferences:
    put:
      tags:
        - users
      operationId: UpdateUserPreference
      summary: User Preference
      description: Upsert user preferences
      requestBody:
        $ref: '#/components/requestBodies/userPrefs'
      responses:
        '201':
          $ref: '#/components/responses/201'
          description: Preferences updated
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/users/keys:
    get:
      tags:
        - users
      operationId: GetUserKeys
      summary: Get User Keys
      description: Get all keys based on roles assigned to user
      parameters:
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          description: Returns user keys based on roles assigned to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userKeys'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/self:
    delete:
      tags:
        - users
      operationId: DeleteOwnAccount
      summary: Delete users
      description: Delete own account. Any user can perform this action.
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/{userId}:
    get:
      tags:
        - users
      operationId: GetUserById
      summary: Get User by ID
      description: Get specific user by user_id
      parameters:
        - $ref: '#/components/parameters/userId'
          required: true
      responses:
        '200':
          description: Returns user with given user_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - users
      operationId: DeleteUsers
      summary: Delete users
      description: Delete users account based on user_id. For Provider Admin use case only.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/users/bulk:
    post:
      tags:
        - users
      operationId: BulkDeleteUsers
      summary: Bulk Delete users
      description: Bulk delete users account based on user_id for a give org. For Provider Admin use case only.
      requestBody:
        $ref: '#/components/requestBodies/deleteUsers'
      parameters:
        - $ref: '#/components/parameters/orgID'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/users:
    get:
      tags:
        - users
      operationId: GetUsersForOrg
      summary: Get All users for a given org
      description: Get All users for a given org
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/teamID'
      responses:
        '200':
          description: Get all user with pagination
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/usersPageForAdmin'
                  - $ref: '#/components/schemas/teamMembersPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/users:
    get:
      tags:
        - users
      operationId: GetUsers
      summary: Get All users (for public view)
      description: Get All users
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: Get all user with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersPageForNonAdmin'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/profile/{id}:
    get:
      tags:
        - users
      operationId: GetUserProfileById
      summary: Get user profile by Id
      description: Get user profile of given user Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Returns user with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/profile:
    get:
      tags:
        - users
      operationId: GetUser
      summary: Get User details
      description: Get user details for logged in user
      responses:
        '200':
          description: user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - users
      operationId: UpdateProfile
      summary: Update Profile
      description: Update user profile data (also updates kratos identity)
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/profile/details:
    get:
      tags:
        - users
      operationId: GetProfileOverview
      summary: Profile Overview
      description: Get Profile overview for logged in user
      responses:
        '200':
          description: user account overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountOverview'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/{user_id}/profile/activity:
    get:
      tags:
        - users
      operationId: GetUserActivity
      summary: User Activity
      description: Get user's most recent activity
      parameters:
        - name: user_id
          in: path
          description: UUID of User
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: user activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recentActivityPage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/identity/users/online:
    get:
      tags:
        - users
      operationId: GetRecentlyOnlineUsers
      summary: Online users
      description: Get info of active / online users in last 24 hours
      responses:
        '200':
          description: active users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recentUsers'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/notify/comment:
    post:
      tags:
        - users
      operationId: HandleNotifyMentionUsers
      summary: Send comment email notification to users
      description: Send email notification to mentioned users, thread participants or owner about comment.
      requestBody:
        $ref: '#/components/requestBodies/mentionRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/notify/feedback:
    post:
      tags:
        - users
      operationId: HandleFeedbackFormSubmission
      summary: Send feedback email notification to user and cloud provider admins
      description: Send email notification to user who filled the feedback, and to all provider admins.
      requestBody:
        $ref: '#/components/requestBodies/userFeedbackRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/users/online:
    get:
      tags:
        - users
      operationId: GetRecentlyOnlineUsersForOrg
      summary: Get recently online users for org
      description: Get info of active / online users for an org in last 24 hours
      parameters:
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          description: active users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recentUsers'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/roles:
    post:
      tags:
        - roles
      operationId: AddRoleHolder
      deprecated: true
      summary: Assign role
      description: Assign role to user
      requestBody:
        $ref: '#/components/requestBodies/roleHolderRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/roles:
    get:
      tags:
        - roles
      operationId: GetAllRoles
      summary: Get All Roles
      description: Get All supported roles
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/all'
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/selector'
      responses:
        '200':
          description: Get all roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolesPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - roles
      operationId: UpsertRoles
      summary: Upsert roles
      description: A new role is created if id is not provided in the request body. To update an existing role pass the id of the role in request body.
      parameters:
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/rolePayload'
      responses:
        '200':
          description: Upserted roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - roles
      operationId: BulkEditRoleHolder
      summary: Bulk Edit Role
      description: Edit roles of user in bulk
      parameters:
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/bulkRoles'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/roles/{roleId}/keychains/{keychainID}:
    post:
      tags:
        - roles
      description: Add keychain to roles
      summary: Add keychain to roles
      operationId: AddKeychainToRole
      parameters:
        - $ref: '#/components/parameters/roleId'
        - $ref: '#/components/parameters/keychainId'
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolesKeychainsMapping'
          description: organization updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - roles
      description: Delete keychain to roles
      summary: Delete keychain from roles
      operationId: DeleteKeychainFromRole
      parameters:
        - $ref: '#/components/parameters/roleId'
        - $ref: '#/components/parameters/keychainId'
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolesKeychainsMapping'
          description: organization updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/roles/{roleId}/keychains:
    get:
      tags:
        - roles
      description: GetKeychainByRoleId
      summary: Get keychain by role ID
      operationId: GetKeychainToRole
      parameters:
        - $ref: '#/components/parameters/roleId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keychainsPage'
          description: organization updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/roles/{id}:
    delete:
      tags:
        - roles
      operationId: DeleteRole
      summary: Delete Role
      description: Edit roles of user in bulk
      parameters:
        - $ref: '#/components/parameters/id'
          required: true
      responses:
        '201':
          description: Deleted roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /smp/performance/profiles:
    get:
      tags:
        - performance management
      operationId: SMPDashboardPerfProfiles
      summary: Performance Profiles
      description: Get Performance Profiles for SMP Dashboard
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/smp/performance/profiles/{id}/results:
    get:
      tags:
        - performance management
      operationId: SMPDashboardTestResults
      summary: Performance Profiles Results by ID
      description: Get Performance Profiles results by ID for SMP Dashboard
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '500':
          $ref: '#/components/responses/500'
        '502':
          description: Invalid path parameter "id"
          content:
            text/plain:
              schema:
                type: string
      security: []
  /api/performance/profiles:
    post:
      tags:
        - performance management
      operationId: UpsertPerformanceProfile
      summary: Upsert Performance Profiles
      description: Update performance profiles or create a new performance profile if no id is provided
      requestBody:
        $ref: '#/components/requestBodies/performanceProfile'
      responses:
        '201':
          description: updated performance profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfile'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - performance management
      operationId: GetPerformanceProfiles
      summary: Get Performance Profiles
      description: Get performance profiles
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Performance Profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfilePage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/performance/profiles/{id}:
    get:
      tags:
        - performance management
      operationId: GetPerformanceProfile
      summary: Performance Profile by Id
      description: Get Performance Profile by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Performance Profile for provided performance profile id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfile'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - performance management
      operationId: DeletePerformanceProfile
      summary: Delete Performance Profiles
      description: Delete performance profiles by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted Performance Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceProfile'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Performance profile not found
        '500':
          $ref: '#/components/responses/500'
  /api/performance/profiles/{id}/results:
    get:
      tags:
        - performance management
      operationId: GetPerformanceProfileResults
      summary: Performance Profiles result
      description: Get paginated Performance Profiles result
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Performance Profile results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryResultPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/performance/profiles/{id}/results/{result_id}:
    post:
      tags:
        - performance management
      operationId: AddPerformanceProfileResult
      summary: Add performance profiles result
      description: Add performance profile result in given performance profile id
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resultId'
      requestBody:
        description: Body for adding performance profile result
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/performanceResult'
      responses:
        '201':
          description: Performance Profile results
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                    format: uuid
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - performance management
      operationId: GetPerformanceProfileResult
      summary: Performance Profiles result
      description: Get the performance test result associated with the given profile id and with the given test id
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resultId'
      responses:
        '200':
          description: Performance Profile results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceResult'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/schedules:
    post:
      tags:
        - scheduler
      operationId: UpsertSchedule
      summary: Upsert Schedule
      description: It will create a new schedule if not present else it will update the entry matching with the provided id
      requestBody:
        $ref: '#/components/requestBodies/schedule'
      responses:
        '201':
          description: upserted given schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedule'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - scheduler
      operationId: GetSchedules
      summary: Get schedules
      description: Get paginated schedules
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedulePage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /user/schedules/{id}:
    get:
      tags:
        - scheduler
      operationId: GetSchedule
      summary: Get Schedule by Id
      description: Get schedule by Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Schedule associated with Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedule'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - scheduler
      operationId: DeleteSchedule
      summary: Delete Schedule by ID
      description: Delete schedule by Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedule'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/tokens:
    get:
      tags:
        - tokens
      operationId: GetUserTokens
      summary: Get Tokens
      description: Get tokens associated with logged in user
      parameters:
        - $ref: '#/components/parameters/isOAuth'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: user tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - tokens
      operationId: GenerateToken
      summary: Generate token
      description: Generate token for logged in user
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/purpose'
      responses:
        '200':
          description: generated token
          content:
            'application/json:':
              schema:
                $ref: '#/components/schemas/tokenPage'
        '400':
          $ref: '#/components/responses/401'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - tokens
      operationId: DeleteUserTokens
      summary: Delete token
      description: Delete token for logged in user
      parameters:
        - $ref: '#/components/parameters/tokenName'
        - $ref: '#/components/parameters/tokenId'
      requestBody:
        $ref: '#/components/requestBodies/mapObject'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenPage'
        '400':
          $ref: '#/components/responses/401'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/tokens/{id}:
    get:
      tags:
        - tokens
      operationId: GetUserTokensByID
      summary: Downloads user token by ID
      description: This API endpoint downloads user token by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Returns user's token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userToken'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/tokens/infinite:
    get:
      tags:
        - tokens
      operationId: IssueIndefiniteLifetimeToken
      summary: Infinite token
      description: Get Infinite Token
      parameters:
        - name: user_id
          in: query
          description: UUID of Admin User
          schema:
            type: string
          required: true
        - name: provider
          in: query
          description: Remote provider
          schema:
            type: string
          required: true
      responses:
        '200':
          description: generated token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenPage'
        '400':
          $ref: '#/components/responses/401'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/credentials:
    get:
      tags:
        - credentials
      operationId: GetUserCredentials
      summary: Get user's credentials
      description: Get all user's credentials for logged in user
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - credentials
      operationId: DeleteUserCredential
      summary: Delete user's credentials
      description: Delete user's credentials (tombstoned records) for logged in user
      parameters:
        - $ref: '#/components/parameters/credentialId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - credentials
      operationId: SaveUserCredential
      summary: Create Credential
      description: Create new credentials for logged in user
      requestBody:
        $ref: '#/components/requestBodies/credential'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - credentials
      operationId: UpdateUserCredential
      summary: Update credential
      description: Update credentials for logged in user
      requestBody:
        $ref: '#/components/requestBodies/credential'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/performance/result/total:
    get:
      tags:
        - performance management results
      operationId: RetrieveTotalPerformanceTestRuns
      summary: Performace tests run
      description: Get total performace tests run
      responses:
        '200':
          description: performance tests run
          content:
            application/json:
              schema:
                properties:
                  total_runs:
                    type: integer
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/performance/results/metrics:
    put:
      tags:
        - performance management results
      operationId: UpdateResultsWithMetrics
      summary: Update SMP results
      description: Update SMP results with metrics
      requestBody:
        $ref: '#/components/requestBodies/performanceResult'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/performance/results:
    post:
      tags:
        - performance management results
      operationId: StoreResults
      summary: Store SMP results
      description: Store SMP results
      requestBody:
        $ref: '#/components/requestBodies/performanceResult'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - performance management results
      operationId: GetResults
      summary: Get SMP results
      description: Get SMP results
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: SMP results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryResultPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/performance/results/{id}:
    get:
      tags:
        - performance management results
      operationId: GetResult
      summary: Get SMP result by Id
      description: Get SMP results associated with id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: SMP result associated with Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performanceResult'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/smi/results:
    post:
      tags:
        - service mesh interface
      operationId: StoreSmiResult
      summary: Store SMI result
      description: It will insert the result if not present else it will update the matching entry
      requestBody:
        $ref: '#/components/requestBodies/smiResult'
      responses:
        '201':
          description: Id for stored SMI result
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - service mesh interface
      operationId: GetSmiResults
      summary: Get SMI Result
      description: Get paginated SMI results
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: SMI results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smiResultPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/smi/results/{id}:
    get:
      tags:
        - service mesh interface
      operationId: GetSmiResult
      summary: Get SMI Result by Id
      description: Get SMI Results by Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: SMI result associated with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smiResult'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/smi/results/total:
    get:
      tags:
        - service mesh interface
      operationId: RetrieveTotalSmiTestRuns
      summary: SMI tests run
      description: Get Total SMI test runs
      responses:
        '200':
          description: SMI tests run
          content:
            application/json:
              schema:
                properties:
                  total_runs:
                    type: integer
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/smi/results/public:
    get:
      tags:
        - service mesh interface
      operationId: GetPublicResults
      summary: SMI Public tests
      description: Get SMI Public tests
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Public SMI results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smiResultPage'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/events:
    get:
      tags:
        - events
      operationId: GetEventsAggregate
      summary: Get Events Aggregate
      description: Get Events Aggreate Count
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events Aggregate Count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventsAggregate'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/events/date:
    get:
      tags:
        - events
      operationId: RetrieveResultsByDate
      summary: Events by Date
      description: Get Events by date
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events by date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventTrackerGroupedArray'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/events/week:
    get:
      tags:
        - events
      operationId: RetrieveResultsByWeek
      summary: Events by Week
      description: Get Events by week
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events by week
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventTrackerGroupedArray'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/events/month:
    get:
      tags:
        - events
      operationId: RetrieveResultsByMonth
      summary: Events by Month
      description: Get Events by month
      parameters:
        - $ref: '#/components/parameters/cumulative'
      responses:
        '200':
          description: Events by month
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventTrackerGroupedArray'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/events/list:
    get:
      tags:
        - events
      operationId: GetEvents
      summary: All Events
      description: Get All events
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/eventsFilter'
      responses:
        '200':
          description: Events list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventsPage'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/events/summary:
    get:
      tags:
        - events
      operationId: GetEventSummaryByUser
      summary: Events Summary
      description: Get Events summary for a user
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Events Summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventSummaryPage'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/events/types:
    get:
      tags:
        - events
      operationId: GetEventTypes
      summary: Event Types
      description: Get Events types
      responses:
        '200':
          description: Events Summary
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    category:
                      type: string
                    action:
                      type: string
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /capabilities:
    get:
      deprecated: true
      tags:
        - capabilities
      operationId: GetCapabilitie
      summary: Capabilities
      description: Get available capabilities for logged in user
      parameters:
        - $ref: '#/components/parameters/os'
        - $ref: '#/components/parameters/playground'
      responses:
        '200':
          description: capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capability'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /{meshery-version}/capabilities:
    get:
      tags:
        - capabilities
      operationId: GetCapabilities
      summary: Capabilities By server version
      description: Get available capabilities for logged in user
      parameters:
        - $ref: '#/components/parameters/mesheryVersion'
        - $ref: '#/components/parameters/os'
        - $ref: '#/components/parameters/playground'
      responses:
        '200':
          description: capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capability'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/system/version:
    get:
      tags:
        - system
      operationId: GitVersionHandler
      summary: Version Info
      description: Meshery Git version and CommitSHA
      responses:
        '200':
          description: Meshery Cloud Version
          content:
            application/json:
              schema:
                properties:
                  version:
                    type: string
                  commitSHA:
                    type: string
      security: []
  /api/content/patterns/resource:
    post:
      tags:
        - content
      operationId: UpsertPatternResource
      summary: Upsert Pattern resource
      description: It will insert the pattern resource if not present else it will update the matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternResource'
      responses:
        '200':
          description: Meshery pattern resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResource'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - content
      operationId: GetPatternResources
      summary: Get Pattern resources
      description: Get paginated pattern resources
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/oamType'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/workspaceID'
          description: Name
      responses:
        '200':
          description: Meshery pattern resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResourcePage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/patterns/resource/{id}:
    get:
      tags:
        - content
      operationId: GetPatternResource
      summary: Pattern Resource by ID
      description: Get Pattern Resource By ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Meshery pattern resource associated with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResource'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - content
      operationId: DeletePatternResource
      summary: Delete pattern resource
      description: Delete pattern resource associated with id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted meshery pattern resource associated with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternResource'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/content/patterns/upload/{id}:
    post:
      tags:
        - content
      operationId: UpsertPatternSourceContent
      summary: Upsert pattern source content
      description: Upserts only pattern source content
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternSourceContent'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/patterns:
    post:
      tags:
        - content
      operationId: UpsertPattern
      summary: Upsert Pattern
      description: It will insert the pattern if not present else it will update the matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternRequestBody'
      responses:
        '200':
          description: Upserted pattern
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - content
      operationId: GetPatterns
      summary: Get Patterns
      description: Get paginated patterns
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/visibility'
        - $ref: '#/components/parameters/metrics'
        - $ref: '#/components/parameters/shared'
        - $ref: '#/components/parameters/orgIDQuery'
        - $ref: '#/components/parameters/workspaceID'
        - $ref: '#/components/parameters/populate'
        - name: user_id
          in: query
          description: UUID of User. Pass user_id for fetching public and published designs
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Patterns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPatternPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - content
      operationId: DeletePatterns
      summary: Delete patterns
      description: Delete patterns with the provided ids
      requestBody:
        $ref: '#/components/requestBodies/mesheryPatternDeleteRequestBody'
      responses:
        '200':
          description: Deleted pattern
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/patterns/{id}:
    get:
      tags:
        - content
      operationId: GetPattern
      summary: Get pattern by ID
      description: Get pattern by ID
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/metrics'
      responses:
        '200':
          description: Pattern associated with ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - content
      operationId: DeletePattern
      summary: Delete pattern by ID
      description: Delete pattern associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted pattern
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryPattern'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/content/patterns/clone/{id}:
    post:
      tags:
        - content
      operationId: ClonePattern
      summary: Clone pattern
      description: Clone pattern associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/mesheryCloneRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/catalog/content/{type}:
    get:
      tags:
        - catalog
      operationId: GetCatalogContent
      summary: Get Catalog Content
      description: Get catalog content by type
      parameters:
        - $ref: '#/components/parameters/catalogContentType'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/contentType'
        - $ref: '#/components/parameters/contentTechnology'
        - $ref: '#/components/parameters/metrics'
        - $ref: '#/components/parameters/class'
        - $ref: '#/components/parameters/userid'
        - $ref: '#/components/parameters/orgIDQuery'
        - $ref: '#/components/parameters/workspaceID'
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/populate'
      responses:
        '200':
          description: catalog content
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      page:
                        type: integer
                      page_size:
                        type: integer
                      total_count:
                        type: integer
                      patterns:
                        type: array
                        items:
                          $ref: '#/components/schemas/mesheryPattern'
                      models_count:
                        type: array
                        items:
                          type: object
                          properties:
                            model:
                              type: string
                            count:
                              type: integer
                            display_name:
                              type: string
                      category_count:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            count:
                              type: integer
                  - type: object
                    properties:
                      page:
                        type: integer
                      page_size:
                        type: integer
                      total_count:
                        type: integer
                      filters:
                        type: array
                        items:
                          $ref: '#/components/schemas/mesheryFilter'
        '500':
          $ref: '#/components/responses/500'
      security: []
    post:
      tags:
        - catalog
      operationId: PublishCatalogContent
      summary: Publish Catalog Content
      description: Sets the visibility of catalog content to published and sets CatalogData (if called by ADMIN or CURATOR), otherwise it pushes the request to CatalogRequests Table
      parameters:
        - $ref: '#/components/parameters/catalogContentType'
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequestBody'
      responses:
        '200':
          description: Catalog requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogRequest'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - catalog
      operationId: UnPublishCatalogContent
      summary: Unpublish Catalog Content
      description: Sets the visibility of catalog content to private and removes the content from website (if called by ADMIN or CURATOR), otherwise rejects the request
      parameters:
        - $ref: '#/components/parameters/catalogContentType'
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequestBody'
      responses:
        '200':
          description: Catalog requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogRequest'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /api/catalog/requests/approve:
    post:
      tags:
        - catalog
      operationId: ApproveCatalogRequest
      summary: Approve Catalog Request
      description: Approve Catalog Request
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /api/catalog/content/classes:
    get:
      tags:
        - catalog
      operationId: GetCatalogContentClasses
      summary: Get supported catalog classes
      description: Get supported catalog classes
      responses:
        '200':
          description: Catalog classes
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/catalog/requests/deny:
    post:
      tags:
        - catalog
      operationId: DenyCatalogRequest
      summary: Deny Catalog Request
      description: Deny Catalog Request
      requestBody:
        $ref: '#/components/requestBodies/mesheryCatalogRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /api/catalog/requests:
    get:
      tags:
        - catalog
      operationId: GetCatalogRequest
      summary: Catalog Request
      description: Get all catalog requests (approved, denied or pending) in a paginated manner
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/requestFilter'
      responses:
        '200':
          description: Catalog requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogRequestsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/filters:
    post:
      tags:
        - content
      operationId: UpsertFilter
      summary: Upsert Filter
      description: It will insert the filter if not present else it will update the matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryFilterRequestBody'
      responses:
        '200':
          description: Upserted filter
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mesheryFilter'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - content
      operationId: GetFilters
      summary: Get Filters
      description: Get paginated filters
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/visibility'
      responses:
        '200':
          description: Filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilterPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/filters/share:
    post:
      tags:
        - content
      operationId: ShareFilters
      summary: Share Filter
      description: Share filter design with others
      requestBody:
        $ref: '#/components/requestBodies/designShare'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Only owner have access to changing sharing mode
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/500'
  /api/content/filters/download/{id}:
    get:
      tags:
        - content
      operationId: GetFilterFile
      summary: Filter file
      description: Get the filter associated with the given filter id without any metadata
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Filter file
          content:
            application/json:
              schema:
                $ref: ./definitions.yml#/components/schemas/mesheryFilter/properties/filter_file
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/content/filters/{id}:
    get:
      tags:
        - content
      operationId: GetFilter
      summary: Get filter by ID
      description: Get filter by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Filter associated with ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilter'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - content
      operationId: DeleteFilter
      summary: Delete filter by ID
      description: Delete filter associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryFilter'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/content/filters/clone/{id}:
    post:
      tags:
        - content
      operationId: CloneFilter
      summary: Clone filter
      description: Clone filter associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/mesheryCloneRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/applications:
    post:
      tags:
        - content
      operationId: UpsertApplication
      summary: Upsert Application
      description: It will insert the application if not present else it will update the matching entry
      requestBody:
        $ref: '#/components/requestBodies/mesheryApplicationRequestBody'
      responses:
        '200':
          description: Upserted application
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mesheryApplication'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - content
      operationId: GetApplications
      summary: Get Applications
      description: Get paginated applications
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryApplicationPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/applications/upload/{id}:
    post:
      tags:
        - content
      operationId: UpsertApplicationSourceContent
      summary: Upsert application source content
      description: Upserts only application source content
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/mesheryApplicationSourceContent'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/patterns/download/{id}:
    get:
      tags:
        - content
      operationId: GetDesignPatternFile
      summary: Get design Pattern File for download
      description: Get design pattern associated with the given pattern id without any metadata
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: application source content associated with ID
          content:
            text/plain:
              schema:
                $ref: ./definitions.yml#/components/schemas/mesheryPattern/properties/source_content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/applications/download/{id}:
    get:
      tags:
        - content
      operationId: GetApplicationSourceContent
      summary: Get application source content
      description: Get application source content
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: application source content associated with ID
          content:
            text/plain:
              schema:
                $ref: ./definitions.yml#/components/schemas/mesheryApplication/properties/source_content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/applications/{id}:
    get:
      tags:
        - content
      operationId: GetApplication
      summary: Get application by ID
      description: Get application by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: application associated with ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryApplication'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - content
      operationId: DeleteApplication
      summary: Delete application by ID
      description: Delete application associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Deleted application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryApplication'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/content/design/share:
    post:
      tags:
        - content
      operationId: HandleShare
      summary: Design Share
      description: Share design with others
      requestBody:
        $ref: '#/components/requestBodies/designShare'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Only owner have access to changing sharing mode
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/500'
  /api/content/view/share:
    post:
      tags:
        - content
      operationId: HandleShareView
      summary: View Share
      description: Share view with others
      requestBody:
        $ref: '#/components/requestBodies/viewShare'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: Only owner have access to changing sharing mode
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/500'
  /collaboration:
    get:
      tags:
        - collaboration
      operationId: CollaborationHandler
      summary: Collaboration
      description: Collaboration
      responses:
        '101':
          description: initate cross server collaboration
  /api/identity/users/request:
    post:
      tags:
        - user onboarding
      operationId: SignupRequest
      summary: Sign up request
      description: Updates user singup request
      requestBody:
        $ref: '#/components/requestBodies/signupData'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - user onboarding
      operationId: GetSignupRequests
      summary: Get all Signup requests
      description: Get all Signup requests
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/requestFilter'
      responses:
        '200':
          description: Signup request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signupRequestsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/request/approve:
    post:
      tags:
        - user onboarding
      operationId: ApproveSignupRequest
      summary: Approve Signup request
      description: Approve Signup request
      parameters:
        - name: id
          in: query
          description: Signup request id
          schema:
            $ref: ./definitions.yml#/components/schemas/id
        - name: first_name
          in: query
          description: First Name
          schema:
            type: string
        - name: last_name
          in: query
          description: Last Name
          schema:
            type: string
        - name: email
          in: query
          description: Email
          schema:
            type: string
        - name: occupation
          in: query
          description: Email
          schema:
            $ref: ./definitions.yml#/components/schemas/email
        - name: organization
          in: query
          description: Organization
          schema:
            type: string
        - name: role
          in: query
          description: Role in organization
          schema:
            type: string
        - name: form_type
          in: query
          description: Form Type (Kanvas or Playground)
          schema:
            type: string
        - name: status
          in: query
          description: Status (approved / denied)
          schema:
            type: string
        - name: task_id
          in: query
          description: Click up task id
          schema:
            type: string
        - name: task_link
          in: query
          description: Click up task link
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/request/deny:
    post:
      tags:
        - user onboarding
      operationId: DenySignupRequest
      summary: Deny signup request
      description: Deny Signup Request
      parameters:
        - name: id
          in: query
          description: Signup request id
          schema:
            $ref: ./definitions.yml#/components/schemas/id
        - name: first_name
          in: query
          description: First Name
          schema:
            type: string
        - name: last_name
          in: query
          description: Last Name
          schema:
            type: string
        - name: email
          in: query
          description: Email
          schema:
            type: string
        - name: occupation
          in: query
          description: Email
          schema:
            $ref: ./definitions.yml#/components/schemas/email
        - name: organization
          in: query
          description: Organization
          schema:
            type: string
        - name: role
          in: query
          description: Role in organization
          schema:
            type: string
        - name: form_type
          in: query
          description: Form Type (Kanvas or Playground)
          schema:
            type: string
        - name: status
          in: query
          description: Status (approved / denied)
          schema:
            type: string
        - name: task_id
          in: query
          description: Click up task id
          schema:
            type: string
        - name: task_link
          in: query
          description: Click up task link
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/request/approve/{id}:
    get:
      tags:
        - user onboarding
      operationId: ApproveSignupRequestByID
      summary: Approve signup request by ID
      description: Approve signup request associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '302':
          description: 'Redirect: SERVER_BASE_URL/profile/roles'
        '303':
          description: 'Redirect: SERVER_BASE_URL/?source=<base64 encoded source url>'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/request/deny/{id}:
    get:
      tags:
        - user onboarding
      operationId: DenySignupRequestByID
      summary: Deny signup request by ID
      description: Deny signup request associated with ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '302':
          description: 'Redirect: SERVER_BASE_URL/profile/roles'
        '303':
          description: 'Redirect: SERVER_BASE_URL/?source=<base64 encoded source url>'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/request/notification:
    get:
      tags:
        - user onboarding
      operationId: GetSignupRequestNotification
      summary: Signup request notification
      description: Signup request notification
      responses:
        '200':
          description: Signup request
          content:
            application/json:
              schema:
                $ref: ./definitions.yml#/components/schemas/signupData
        '204':
          description: Status no content
        '401':
          $ref: '#/components/responses/401'
  /api/integrations/connections:
    post:
      tags:
        - integrations
      operationId: RegisterConnection
      summary: Register Connection
      description: Register with Meshery Cloud
      requestBody:
        $ref: '#/components/requestBodies/connectionPayload'
      responses:
        '200':
          description: Paginated registered connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - integrations
      operationId: GetConnections
      summary: Get connections
      description: Get connections
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/connectionsByMultipleKinds'
        - $ref: '#/components/parameters/connectionsByMultipleStatus'
      responses:
        '200':
          description: Paginated list of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/connections/{connectionId}:
    put:
      tags:
        - integrations
      operationId: EditConnectionByID
      summary: Edit Connection by ID
      description: Edit registered connection using the connection ID
      parameters:
        - $ref: '#/components/parameters/connectionId'
      requestBody:
        $ref: '#/components/requestBodies/connectionPayload'
      responses:
        '200':
          description: Edited connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - integrations
      operationId: DeleteConnection
      summary: Delete connection
      description: Delete registered connection
      parameters:
        - $ref: '#/components/parameters/connectionId'
      responses:
        '200':
          description: Deleted connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/connections/status/{connectionId}:
    put:
      tags:
        - integrations
      operationId: UpdateConnectionStatusByID
      summary: Update Connection Status by ID
      description: Edit connection status using the connection ID
      parameters:
        - $ref: '#/components/parameters/connectionId'
      requestBody:
        description: Body containing connection status to update.
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Updated connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '500':
          description: Event containing error details in metadata
          content:
            application/json:
              schema:
                $ref: ./definitions.yml#/components/schemas/event
  /api/integrations/connections/status:
    get:
      tags:
        - integrations
      operationId: GetConnectionStatus
      summary: Get status of all connections
      description: Get summary about the status of all connections
      responses:
        '200':
          description: Status of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionsStatusPage'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/meshmodels/models:
    get:
      tags:
        - integrations
      operationId: GetMeshModelModels
      summary: Get MeshModel models
      description: Get MeshModel models
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesizeWithAll'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: MeshModel Model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meshmodelModelsPage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/integrations/meshmodels/categories:
    get:
      tags:
        - integrations
      operationId: GetMeshModelCategories
      summary: Get MeshModel categories
      description: Get MeshModel categories
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: MeshModel Categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meshmodelCategoriesPage'
        '500':
          $ref: '#/components/responses/500'
      security: []
  /api/integrations/connections/{connectionKind}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKind
      summary: Get connections by kind
      description: Get connections by kind
      parameters:
        - $ref: '#/components/parameters/connectionKind'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/instanceIdQuery'
      responses:
        '200':
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/500'
      security: []
    delete:
      tags:
        - integrations
      operationId: DeleteConnectionKind
      summary: Delete connection
      description: Delete registered connection
      parameters:
        - $ref: '#/components/parameters/connectionKind'
      responses:
        '200':
          description: Deleted connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/connections/{connectionKind}/{connectionId}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKindAndConnectionID
      summary: Get connections by kind and connectionID.
      description: Get connections by kind (kind is required because this API returns the results in non std format of a connection)
      parameters:
        - $ref: '#/components/parameters/connectionKind'
        - $ref: '#/components/parameters/connectionId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/k8sContextPersistResponse'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/connections/meshery/{mesheryServerID}:
    delete:
      tags:
        - integrations
      operationId: DeleteMesheryConnection
      summary: Delete Meshery connection
      description: Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs.
      parameters:
        - $ref: '#/components/parameters/serverId'
      responses:
        '200':
          description: Deleted Meshery connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs:
    get:
      tags:
        - organization
      description: Returns all organizations to which the user belongs
      operationId: getOrgs
      summary: Read organizations
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/all'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizationsPage'
          description: Get organization's response
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - organization
      description: Creates a new organization
      operationId: createOrg
      summary: Create an organization
      requestBody:
        $ref: '#/components/requestBodies/organizationPayload'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
          description: organization creation response
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}:
    get:
      tags:
        - organization
      description: Returns the organization
      operationId: getOrg
      summary: Read an organization
      parameters:
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizationsPage'
          description: Get organization's response
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - organization
      description: Deletes the organization
      operationId: deleteOrg
      summary: Delete an organization
      parameters:
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizationsPage'
          description: organization deleted
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - organization
      description: Updates the organization
      operationId: handleUpdateOrg
      summary: Update an organization
      parameters:
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/organizationPayload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizationsPage'
          description: organization updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/preferences:
    get:
      tags:
        - organization
      parameters:
        - $ref: '#/components/parameters/orgID'
      description: Get preferences for an organization (theme, custom logos,etc)
      summary: Get preferences for an organization
      operationId: GetOrgPreferences
      responses:
        '200':
          description: Organization Preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizationPreferences'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/teams/{teamId}:
    post:
      tags:
        - organization
      description: Add team to organization
      summary: Add team to organization
      operationId: AddTeamToOrg
      parameters:
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamsOrganizationsMappingPage'
          description: organization updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - organization
      description: Delete team from organization
      summary: Delete team from organization
      operationId: RemoveTeamFromOrg
      parameters:
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamsOrganizationsMappingPage'
          description: Team deleted from Organization
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - teams
      description: Returns the specified team
      operationId: getTeam
      summary: Read Team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          description: Get team's response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableTeam'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - teams
      operationId: UpdateTeam
      summary: Update the specified team
      description: Updates the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/teamPayload'
      responses:
        '200':
          description: Updated team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/teams:
    get:
      tags:
        - teams
      description: Returns all teams belonging to an organization
      operationId: getTeams
      summary: Read Teams
      parameters:
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Get teams's response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamsPage'
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - teams
      operationId: CreateTeam
      summary: Create Team
      description: Creates a new Team
      parameters:
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/teamPayload'
      responses:
        '201':
          description: Created team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/teams/{teamId}/users:
    get:
      tags:
        - teams
      operationId: ListUsersInTeam
      summary: List users in Team
      description: Lists the users in the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamMembersPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/teams/{teamId}/users/{userId}:
    post:
      tags:
        - teams
      operationId: AddUserToTeam
      summary: Add user to team
      description: Adds the user to the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          description: UserTeamMapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersTeamsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - teams
      operationId: RemoveUserFromTeam
      summary: Remove user membership from team
      description: Remove the user from the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/orgID'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersTeamsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/teams/{teamId}/users:
    get:
      tags:
        - teams
      operationId: ListUsersNotInTeam
      summary: List users not in Team
      description: Lists the users not in the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamMembersPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/teams/{teamId}/roles:
    get:
      tags:
        - teams
      operationId: ListTeamRoles
      summary: List Team roles
      description: Lists the roles associated with the team
      parameters:
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          description: Roles assigned to team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/teams/{teamId}/roles/{roleId}:
    post:
      tags:
        - teams
      operationId: AddRoleToTeam
      summary: Add role to team
      description: Adds role to the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/roleId'
      responses:
        '200':
          description: Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - teams
      operationId: RemoveRoleFromTeam
      summary: Remove role from team
      description: Removes role from the specified team
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/roleId'
      responses:
        '200':
          description: Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/auth/keys:
    get:
      tags:
        - keys
      operationId: GetKeys
      summary: Get keys
      description: Lists the keys available
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keysPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - keys
      operationId: UpsertKey
      summary: Upsert key
      description: A new key is created if id is not provided in the request body. To update an existing key pass the updated key along with id in request body.
      requestBody:
        $ref: '#/components/requestBodies/keyPayload'
      responses:
        '200':
          description: Keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/auth/keys/{id}:
    get:
      tags:
        - keys
      operationId: GetKeyByID
      summary: Get Key associated with id
      description: Get key by ID
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - keys
      operationId: DeleteKey
      summary: Delete key associated with id
      description: Delete key associated with id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/auth/keychains:
    get:
      tags:
        - keychains
      operationId: GetKeychains
      summary: Get keychains
      description: Lists the keychains
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: keychains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keysPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - keychains
      operationId: UpsertKeychain
      summary: Upsert Keychain
      description: A new keychain is created if id is not provided in the request body. To update an existing keychain pass the updated keychain along with id in request body.
      requestBody:
        $ref: '#/components/requestBodies/keychainPayload'
      responses:
        '200':
          description: Upserted keychain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keychain'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/auth/keychains/{keychainID}/keys:
    get:
      tags:
        - keychains
      description: Returns all keys belonging to a keychain
      operationId: GetkeysOfOrg
      summary: Get keys of an keychain
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/keychainId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keysPage'
          description: Key's of Keychain's
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/auth/keychains/{id}/{keyId}:
    post:
      tags:
        - keychains
      operationId: AddtoKeychain
      summary: Add Key to Keychain
      description: Add a key to a Keychain
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/keyId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - keychains
      operationId: DeleteKeyFromKeychain
      summary: Remove Key from Keychain
      description: Remove a key from  Keychain
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/keyId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/auth/keychains/{id}:
    get:
      tags:
        - keychains
      operationId: GetKeychainByID
      summary: Get Key Chain associated with id
      description: Lists the key chain
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Key Chain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keychain'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - keychains
      operationId: DeleteKeychain
      summary: Remove Keychain
      description: Deleting a Keychain doesn't delete keys associated with it, instead key chain reference is removed from keys i.e. keys are no longer part of any keychain
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/badges:
    get:
      tags:
        - users
      operationId: GetAvailableBadges
      summary: Gets available badges
      description: Gets available badges
      responses:
        '200':
          description: Badges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badges'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/badges:
    put:
      tags:
        - users
      operationId: AssignBadges
      summary: Assign a badge to user
      description: Assign a badge to user
      requestBody:
        $ref: '#/components/requestBodies/badgeRequestPayload'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - users
      operationId: UnAssignBadges
      summary: UnAssign a badge to user
      description: Assign a badge to user
      requestBody:
        $ref: '#/components/requestBodies/badgeRequestPayload'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/orgs/{orgID}/users/{userId}:
    post:
      tags:
        - organization
      operationId: AddUserToOrg
      summary: Add user to org
      description: Adds the user to the specified org
      parameters:
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - organization
      operationId: DeleteUserFromOrg
      summary: Delete user from org
      description: Deletes the user from the specified org
      parameters:
        - $ref: '#/components/parameters/orgID'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/profile/provider:
    get:
      tags:
        - users
      operationId: GetUserProvider
      summary: Get user provider
      description: Get user provider
      responses:
        '200':
          description: User Provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider:
                    enum:
                      - github
                      - google
                      - meshery-cloud
  /api/identity/users/password:
    post:
      tags:
        - users
      operationId: UpdateUsersPassword
      summary: Update user password
      description: Update user password
      requestBody:
        description: Body for new password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: password
                  example: this is test password
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/environments:
    post:
      tags:
        - environments
      operationId: CreateEnvironment
      summary: Create an environment
      description: Creates a new environment
      requestBody:
        $ref: '#/components/requestBodies/environmentPayload'
      responses:
        '200':
          description: Created Environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - environments
      operationId: GetEnvironments
      summary: Get all environments
      description: Gets all environments
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/orgIDQuery'
      responses:
        '200':
          description: Environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/environments/{environmentId}:
    get:
      tags:
        - environments
      operationId: GetEnvironmentByID
      summary: Get an environment by ID
      description: Gets an environment by its ID
      parameters:
        - $ref: '#/components/parameters/environmentId'
        - $ref: '#/components/parameters/orgIDQuery'
      responses:
        '200':
          description: Environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - environments
      operationId: DeleteEnvironment
      summary: Delete an environment
      description: Deletes an environment by its ID
      parameters:
        - $ref: '#/components/parameters/environmentId'
      responses:
        '200':
          description: Environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - environments
      operationId: UpdateEnvironment
      summary: Update an environment
      description: Updates the environment
      parameters:
        - $ref: '#/components/parameters/environmentId'
      requestBody:
        $ref: '#/components/requestBodies/environmentPayload'
      responses:
        '200':
          description: Environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/environments/{environmentId}/connections:
    get:
      tags:
        - environments
      operationId: GetEnvironmentConnections
      summary: Get connections of an environment (by default returns assigned)
      description: Gets connections of an environment by its ID
      parameters:
        - $ref: '#/components/parameters/environmentId'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/environmentsFilter'
      responses:
        '200':
          description: Environment connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/environments/{environmentId}/connections/{connectionId}:
    post:
      tags:
        - environments
      operationId: AddConnectionToEnvironment
      summary: Add connection to environment
      description: Adds a connection to an environment by their IDs
      parameters:
        - $ref: '#/components/parameters/environmentId'
        - $ref: '#/components/parameters/connectionId'
      responses:
        '200':
          description: Environment and Connection mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentConnectionMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - environments
      operationId: RemoveConnectionFromEnvironment
      summary: Remove connection from environment
      description: Removes a connection from an environment by their IDs
      parameters:
        - $ref: '#/components/parameters/environmentId'
        - $ref: '#/components/parameters/connectionId'
      responses:
        '200':
          description: Environment and Connection mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentConnectionMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces:
    post:
      tags:
        - workspaces
      operationId: CreateWorkspace
      summary: Create an workspace
      description: Creates a new workspace
      parameters:
        - $ref: '#/components/parameters/orgID'
      requestBody:
        $ref: '#/components/requestBodies/workspacePayload'
      responses:
        '201':
          description: Created workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacePage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - workspaces
      operationId: GetWorkspaces
      summary: Get all workspaces
      description: Gets all workspaces
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/orgIDQuery'
      responses:
        '200':
          description: Workspaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacePage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}:
    get:
      tags:
        - workspaces
      operationId: GetWorkspaceByID
      summary: Get an workspace by ID
      description: Gets an workspace by its ID
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/orgIDQuery'
      responses:
        '200':
          description: Workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacePage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - workspaces
      operationId: DeleteWorkspace
      summary: Delete an workspace
      description: Deletes an workspace by its ID
      parameters:
        - $ref: '#/components/parameters/workspaceId'
      responses:
        '200':
          description: Workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacePage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - workspaces
      operationId: UpdateWorkspace
      summary: Update an workspace
      description: Updates the workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
      requestBody:
        $ref: '#/components/requestBodies/workspaceUpdatePayload'
      responses:
        '200':
          description: Workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacePage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/teams:
    get:
      tags:
        - workspaces_teams
      operationId: GetTeamsOfWorkspace
      summary: Get all teams assigned to a workspace (by default returns assigned)
      description: Gets an Teams of a given workspace by its ID
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/workspaceFilter'
      responses:
        '200':
          description: Teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamsPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/teams/{teamId}:
    delete:
      tags:
        - workspaces_teams
      operationId: UnassignTeamFromWorkspace
      summary: Unassign a team from a workspace
      description: Unassigns a team from a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          description: Workspaces teams mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesTeamsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - workspaces_teams
      operationId: AssignTeamToWorkspace
      summary: Assign a team to a workspace
      description: Assigns a team to a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          description: Workspaces teams mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesTeamsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/environments:
    get:
      tags:
        - workspaces_environments
      operationId: GetEnvironmentsOfWorkspace
      summary: Get all environments assigned to a workspace (by default returns assigned)
      description: Gets an environments of a given workspace by its ID
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/workspaceFilter'
      responses:
        '200':
          description: Environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/environments/{environmentId}:
    delete:
      tags:
        - workspaces_environments
      operationId: UnassignEnvironmentFromWorkspace
      summary: Unassign a environment from a workspace
      description: Unassigns a environment from a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/environmentId'
      responses:
        '200':
          description: Workspaces environments mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesEnvironmentsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - workspaces_environments
      operationId: AssignEnvironmentToWorkspace
      summary: Assign a environment to a workspace
      description: Assigns a environment to a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/environmentId'
      responses:
        '200':
          description: Workspaces environments mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesEnvironmentsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/designs/{designId}:
    delete:
      tags:
        - workspaces_designs
      operationId: UnassignDesignFromWorkspace
      summary: Unassign a design from a workspace
      description: Unassign a design from a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/designId'
      responses:
        '200':
          description: Workspaces designs mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesDesignsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - workspaces_designs
      operationId: AssignDesignToWorkspace
      summary: Assign a design to a workspace
      description: Assigns a design to a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/designId'
      responses:
        '200':
          description: Workspaces designs mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesDesignsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/designs:
    get:
      tags:
        - workspaces_designs
      operationId: GetDesignsOfWorkspace
      summary: Get all designs assigned to a workspace (by default returns assigned)
      description: Gets an designs of a given workspace by its ID
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/workspaceFilter'
        - $ref: '#/components/parameters/workspaceId'
      responses:
        '200':
          description: Design
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryDesignPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/views/{viewId}:
    delete:
      tags:
        - workspaces_views
      operationId: UnassignViewFromWorkspace
      summary: Unassign a view from a workspace
      description: Unassign a view from a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/viewId'
      responses:
        '200':
          description: Workspaces views mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesViewsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - workspaces_views
      operationId: AssignViewToWorkspace
      summary: Assign a view to a workspace
      description: Assigns a view to a workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/viewId'
      responses:
        '200':
          description: Workspaces views mappings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspacesViewsMappingPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/views:
    get:
      tags:
        - workspaces_views
      operationId: GetViewsOfWorkspace
      summary: Get all views assigned to a workspace (by default returns assigned)
      description: Gets views of a given workspace by its ID
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/workspaceFilter'
        - $ref: '#/components/parameters/workspaceId'
      responses:
        '200':
          description: View
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryViewPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/workspaces/{workspaceId}/events:
    get:
      tags:
        - workspaces
      operationId: GetEventsOfWorkspace
      summary: Get all events of workspace
      description: Get all events of workspace. Only users that have access to a workspace can get its events. Provider Admins can see events for any workspace
      parameters:
        - $ref: '#/components/parameters/workspaceId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventsPage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/content/views/{viewId}:
    get:
      tags:
        - views
      operationId: GetViewByID
      summary: Get a view by ID
      description: Gets a view by its ID
      parameters:
        - $ref: '#/components/parameters/viewId'
      responses:
        '200':
          description: view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryView'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - views
      operationId: DeleteView
      summary: Delete a view
      description: Deletes a view by its ID
      parameters:
        - $ref: '#/components/parameters/viewId'
      responses:
        '200':
          description: view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryView'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - views
      operationId: UpdateView
      summary: Update a view
      description: Updates the view
      parameters:
        - $ref: '#/components/parameters/viewId'
      requestBody:
        $ref: '#/components/requestBodies/viewUpdatePayload'
      responses:
        '200':
          description: view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryView'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/content/views:
    post:
      tags:
        - views
      operationId: CreateView
      summary: Create a view
      description: Creates a new view
      requestBody:
        $ref: '#/components/requestBodies/mesheryViewPayload'
      responses:
        '201':
          description: Created view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryView'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - views
      operationId: GetViews
      summary: Get all views
      description: Gets all views
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pagesize'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/shared'
        - $ref: '#/components/parameters/visibility'
        - $ref: '#/components/parameters/orgIDQuery'
        - name: user_id
          in: query
          description: UUID of User. Pass user_id for fetching public and private views of a user
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Views
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mesheryViewPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/identity/users/notifications/preferences:
    put:
      tags:
        - users
      operationId: UpdateNotificationPreferences
      summary: Updates the notification preferences of the user
      description: Updates the notification preferences of the user
      requestBody:
        $ref: '#/components/requestBodies/notificationPreferenceRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - users
      operationId: GetAvailableNotificationPreferences
      summary: Get available notification preferences
      description: Get available notification preferences
      responses:
        '200':
          description: Available notification preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableNotificationPreferences'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/schema/resource/{resourceName}:
    get:
      tags:
        - rjsf
      operationId: GetRJSFSchema
      summary: Get rjsf schema
      description: Get rjsf schema
      parameters:
        - $ref: '#/components/parameters/resourceName'
      responses:
        '200':
          description: rjsf schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schema'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/resource/{resourceType}/share/{resourceId}:
    post:
      tags:
        - resource
      operationId: HandleResourceShare
      summary: Share resource with different actors
      description: Share resource with different actors (actors can be user, team, environment..)
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      requestBody:
        $ref: '#/components/requestBodies/resourceShare'
      responses:
        '200':
          description: rjsf schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceAccessMapping'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - resource
      operationId: GetResourceAccessMappings
      summary: Get access record of resource
      description: Get access record of resource by providing resource type and id
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          description: Access record of a resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceAccessMappingPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/resource/{resourceType}/share/{resourceId}/{actorType}:
    get:
      tags:
        - resource
      operationId: GetResourceAccessActorsByType
      summary: Retrieve all actors that have access for a resource.
      description: Retrieve all actors that have access for a resource, by providing actor type.
      parameters:
        - $ref: '#/components/parameters/resourceType'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/actorType'
      responses:
        '200':
          description: On passing "user" as actorType you will get all actors which are type of user with their info. Actor type can be user, team, system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userSummaryPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/github/metadata:
    post:
      tags:
        - github
      operationId: HandleAddMetadata
      summary: Add metadata to github connection
      description: Add repo path and installationId as metadata to github connection, and get response of imported designs from passed path
      requestBody:
        $ref: '#/components/requestBodies/githubMetadataRequest'
      responses:
        '200':
          description: Imported designs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/githubMetadataPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/github/verify/{repoName}:
    post:
      tags:
        - github
      operationId: VerifyRepository
      summary: Scan and verify if kanvas.yaml file already exist in repository
      description: Scan and verify if kanvas.yaml file already exist in repository by passing repo name and installation id
      parameters:
        - name: repoName
          in: path
          required: true
          schema:
            type: string
          description: The name of the repository
        - $ref: '#/components/parameters/installationId'
      responses:
        '200':
          description: Status weather file exist or not
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  error:
                    type: string
                  file_url:
                    type: string
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/github/scan:
    get:
      tags:
        - github
      operationId: ScanGitHubRepos
      summary: Scans and returns the paginated tree view of the repository.
      description: Scans and returns the paginated tree view of the repository.
      parameters:
        - $ref: '#/components/parameters/repoName'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: Imported designs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repositoryScanResultsPage'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/integrations/github/import/{connectionId}:
    post:
      tags:
        - github
      operationId: ImportScannedRepo
      summary: Import designs from github
      description: Import designs from github
      parameters:
        - $ref: '#/components/parameters/connectionId'
      requestBody:
        $ref: '#/components/requestBodies/githubImportRequest'
      responses:
        '200':
          description: Bulk import of designs by cloning GitHub repository
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/event'
                      description: The `metadata.err` has separate error for each failed imports for a location.
                      example: If user selects a directory with location as `/a/b/c`, and out of 5 available designs 2 failed to import. The `metadata.err` will contain 2 separate error
                  patterns:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/mesheryPattern'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /api/webhook/{webhookType}:
    post:
      tags:
        - webhook
      operationId: CallWebhook
      summary: Call webhook from server
      description: This API calls defined webhooks from server, supported types are (support, kanvasEntitlement).
      parameters:
        - $ref: '#/components/parameters/webhookType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /integrations/snapshot/email:
    post:
      tags:
        - integrations
      summary: Sends a Meshery Snapshot email to a user
      requestBody:
        description: Request payload to send an email.
        required: true
        content:
          application/json:
            schema:
              $ref: ./definitions.yml#/components/schemas/sendSnapshotRequest
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
